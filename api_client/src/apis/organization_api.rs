/*
 * server
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`add_organization_member`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AddOrganizationMemberError {
    Status401(models::UnauthorizedError),
    Status403(models::ForbiddenError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_organization`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteOrganizationError {
    Status401(models::UnauthorizedError),
    Status403(models::ForbiddenError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_organization_member`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteOrganizationMemberError {
    Status401(models::UnauthorizedError),
    Status403(models::ForbiddenError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`edit_organization`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EditOrganizationError {
    Status401(models::UnauthorizedError),
    Status403(models::ForbiddenError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`edit_organization_member`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EditOrganizationMemberError {
    Status401(models::UnauthorizedError),
    Status403(models::ForbiddenError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_organization`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetOrganizationError {
    Status401(models::UnauthorizedError),
    Status403(models::ForbiddenError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_organization_members`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetOrganizationMembersError {
    Status401(models::UnauthorizedError),
    Status403(models::ForbiddenError),
    UnknownValue(serde_json::Value),
}


pub async fn add_organization_member(configuration: &configuration::Configuration, org_slug: &str, membership: models::Membership) -> Result<models::CreateSuccess, Error<AddOrganizationMemberError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org_slug = org_slug;
    let p_membership = membership;

    let uri_str = format!("{}/api/organizations/{org_slug}/members", configuration.base_path, org_slug=crate::apis::urlencode(p_org_slug));
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_membership);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::CreateSuccess`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::CreateSuccess`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<AddOrganizationMemberError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Dangerous!
pub async fn delete_organization(configuration: &configuration::Configuration, org_slug: &str) -> Result<(), Error<DeleteOrganizationError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org_slug = org_slug;

    let uri_str = format!("{}/api/organizations/{org_slug}", configuration.base_path, org_slug=crate::apis::urlencode(p_org_slug));
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteOrganizationError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn delete_organization_member(configuration: &configuration::Configuration, org_slug: &str, member_id: &str) -> Result<(), Error<DeleteOrganizationMemberError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org_slug = org_slug;
    let p_member_id = member_id;

    let uri_str = format!("{}/api/organizations/{org_slug}/members/{member_id}", configuration.base_path, org_slug=crate::apis::urlencode(p_org_slug), member_id=crate::apis::urlencode(p_member_id));
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteOrganizationMemberError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn edit_organization(configuration: &configuration::Configuration, org_slug: &str, mutable_organization: models::MutableOrganization) -> Result<models::CreateSuccess, Error<EditOrganizationError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org_slug = org_slug;
    let p_mutable_organization = mutable_organization;

    let uri_str = format!("{}/api/organizations/{org_slug}", configuration.base_path, org_slug=crate::apis::urlencode(p_org_slug));
    let mut req_builder = configuration.client.request(reqwest::Method::PATCH, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_mutable_organization);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::CreateSuccess`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::CreateSuccess`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<EditOrganizationError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn edit_organization_member(configuration: &configuration::Configuration, org_slug: &str, member_id: &str, edit_role_body: models::EditRoleBody) -> Result<(), Error<EditOrganizationMemberError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org_slug = org_slug;
    let p_member_id = member_id;
    let p_edit_role_body = edit_role_body;

    let uri_str = format!("{}/api/organizations/{org_slug}/members/{member_id}", configuration.base_path, org_slug=crate::apis::urlencode(p_org_slug), member_id=crate::apis::urlencode(p_member_id));
    let mut req_builder = configuration.client.request(reqwest::Method::PATCH, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_edit_role_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<EditOrganizationMemberError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn get_organization(configuration: &configuration::Configuration, org_slug: &str) -> Result<models::Organization, Error<GetOrganizationError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org_slug = org_slug;

    let uri_str = format!("{}/api/organizations/{org_slug}", configuration.base_path, org_slug=crate::apis::urlencode(p_org_slug));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::Organization`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::Organization`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetOrganizationError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn get_organization_members(configuration: &configuration::Configuration, org_slug: &str) -> Result<Vec<models::Member>, Error<GetOrganizationMembersError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org_slug = org_slug;

    let uri_str = format!("{}/api/organizations/{org_slug}/members", configuration.base_path, org_slug=crate::apis::urlencode(p_org_slug));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::Member&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::Member&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetOrganizationMembersError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

