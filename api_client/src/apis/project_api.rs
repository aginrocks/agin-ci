/*
 * server
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`delete_project`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteProjectError {
    Status401(models::UnauthorizedError),
    Status403(models::ForbiddenError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`edit_project`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EditProjectError {
    Status401(models::UnauthorizedError),
    Status403(models::ForbiddenError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_project`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetProjectError {
    Status401(models::UnauthorizedError),
    Status403(models::ForbiddenError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`regenerate_project_keys`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RegenerateProjectKeysError {
    Status401(models::UnauthorizedError),
    Status403(models::ForbiddenError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`regenerate_webhook_secret`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RegenerateWebhookSecretError {
    Status401(models::UnauthorizedError),
    Status403(models::ForbiddenError),
    UnknownValue(serde_json::Value),
}


pub async fn delete_project(configuration: &configuration::Configuration, org_slug: &str, project_slug: &str) -> Result<(), Error<DeleteProjectError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_org_slug = org_slug;
    let p_path_project_slug = project_slug;

    let uri_str = format!("{}/api/organizations/{org_slug}/projects/{project_slug}", configuration.base_path, org_slug=crate::apis::urlencode(p_path_org_slug), project_slug=crate::apis::urlencode(p_path_project_slug));
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteProjectError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn edit_project(configuration: &configuration::Configuration, org_slug: &str, project_slug: &str, create_project_body: models::CreateProjectBody) -> Result<models::CreateSuccess, Error<EditProjectError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_org_slug = org_slug;
    let p_path_project_slug = project_slug;
    let p_body_create_project_body = create_project_body;

    let uri_str = format!("{}/api/organizations/{org_slug}/projects/{project_slug}", configuration.base_path, org_slug=crate::apis::urlencode(p_path_org_slug), project_slug=crate::apis::urlencode(p_path_project_slug));
    let mut req_builder = configuration.client.request(reqwest::Method::PATCH, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_body_create_project_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::CreateSuccess`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::CreateSuccess`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<EditProjectError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn get_project(configuration: &configuration::Configuration, org_slug: &str, project_slug: &str) -> Result<models::PublicProject, Error<GetProjectError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_org_slug = org_slug;
    let p_path_project_slug = project_slug;

    let uri_str = format!("{}/api/organizations/{org_slug}/projects/{project_slug}", configuration.base_path, org_slug=crate::apis::urlencode(p_path_org_slug), project_slug=crate::apis::urlencode(p_path_project_slug));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::PublicProject`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::PublicProject`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetProjectError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// These keys are used to pull the repository. You can get the public key from the project details.
pub async fn regenerate_project_keys(configuration: &configuration::Configuration, org_slug: &str, project_slug: &str) -> Result<models::PublicProject, Error<RegenerateProjectKeysError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_org_slug = org_slug;
    let p_path_project_slug = project_slug;

    let uri_str = format!("{}/api/organizations/{org_slug}/projects/{project_slug}/regenerate-keys", configuration.base_path, org_slug=crate::apis::urlencode(p_path_org_slug), project_slug=crate::apis::urlencode(p_path_project_slug));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::PublicProject`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::PublicProject`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<RegenerateProjectKeysError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// This secret is used to verify the authenticity of webhooks sent by the repository service. You won't be able to view it again after this call.
pub async fn regenerate_webhook_secret(configuration: &configuration::Configuration, org_slug: &str, project_slug: &str) -> Result<models::RegenerateSecretResponse, Error<RegenerateWebhookSecretError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_org_slug = org_slug;
    let p_path_project_slug = project_slug;

    let uri_str = format!("{}/api/organizations/{org_slug}/projects/{project_slug}/regenerate-webhook-secret", configuration.base_path, org_slug=crate::apis::urlencode(p_path_org_slug), project_slug=crate::apis::urlencode(p_path_project_slug));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::RegenerateSecretResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::RegenerateSecretResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<RegenerateWebhookSecretError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

