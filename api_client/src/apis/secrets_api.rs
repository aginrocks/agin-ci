/*
 * server
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`create_organization_secret`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateOrganizationSecretError {
    Status401(models::UnauthorizedError),
    Status403(models::ForbiddenError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_organization_secret`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteOrganizationSecretError {
    Status401(models::UnauthorizedError),
    Status403(models::ForbiddenError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`edit_organization_secret`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EditOrganizationSecretError {
    Status401(models::UnauthorizedError),
    Status403(models::ForbiddenError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_organization_secrets`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetOrganizationSecretsError {
    Status401(models::UnauthorizedError),
    Status403(models::ForbiddenError),
    UnknownValue(serde_json::Value),
}


pub async fn create_organization_secret(configuration: &configuration::Configuration, org_slug: &str, create_org_secret_body: models::CreateOrgSecretBody) -> Result<models::CreateSuccess, Error<CreateOrganizationSecretError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org_slug = org_slug;
    let p_create_org_secret_body = create_org_secret_body;

    let uri_str = format!("{}/api/organizations/{org_slug}/secrets", configuration.base_path, org_slug=crate::apis::urlencode(p_org_slug));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_create_org_secret_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::CreateSuccess`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::CreateSuccess`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateOrganizationSecretError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn delete_organization_secret(configuration: &configuration::Configuration, org_slug: &str, secret_id: &str) -> Result<(), Error<DeleteOrganizationSecretError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org_slug = org_slug;
    let p_secret_id = secret_id;

    let uri_str = format!("{}/api/organizations/{org_slug}/secrets/{secret_id}", configuration.base_path, org_slug=crate::apis::urlencode(p_org_slug), secret_id=crate::apis::urlencode(p_secret_id));
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteOrganizationSecretError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn edit_organization_secret(configuration: &configuration::Configuration, org_slug: &str, secret_id: &str, edit_org_secret_body: models::EditOrgSecretBody) -> Result<models::CreateSuccess, Error<EditOrganizationSecretError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org_slug = org_slug;
    let p_secret_id = secret_id;
    let p_edit_org_secret_body = edit_org_secret_body;

    let uri_str = format!("{}/api/organizations/{org_slug}/secrets/{secret_id}", configuration.base_path, org_slug=crate::apis::urlencode(p_org_slug), secret_id=crate::apis::urlencode(p_secret_id));
    let mut req_builder = configuration.client.request(reqwest::Method::PATCH, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_edit_org_secret_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::CreateSuccess`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::CreateSuccess`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<EditOrganizationSecretError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn get_organization_secrets(configuration: &configuration::Configuration, org_slug: &str) -> Result<Vec<models::PublicSecret>, Error<GetOrganizationSecretsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org_slug = org_slug;

    let uri_str = format!("{}/api/organizations/{org_slug}/secrets", configuration.base_path, org_slug=crate::apis::urlencode(p_org_slug));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::PublicSecret&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::PublicSecret&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetOrganizationSecretsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

