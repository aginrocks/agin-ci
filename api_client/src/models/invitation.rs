/*
 * server
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Invitation {
    #[serde(rename = "_id")]
    pub _id: String,
    #[serde(rename = "action_taken_at", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub action_taken_at: Option<Option<String>>,
    #[serde(rename = "created_at")]
    pub created_at: String,
    #[serde(rename = "invitee")]
    pub invitee: String,
    #[serde(rename = "inviter")]
    pub inviter: String,
    #[serde(rename = "organization")]
    pub organization: String,
    #[serde(rename = "role")]
    pub role: models::OrganizationRole,
    #[serde(rename = "status")]
    pub status: models::InvitationStatus,
}

impl Invitation {
    pub fn new(_id: String, created_at: String, invitee: String, inviter: String, organization: String, role: models::OrganizationRole, status: models::InvitationStatus) -> Invitation {
        Invitation {
            _id,
            action_taken_at: None,
            created_at,
            invitee,
            inviter,
            organization,
            role,
            status,
        }
    }
}

