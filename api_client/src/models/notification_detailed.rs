/*
 * server
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct NotificationDetailed {
    #[serde(rename = "body")]
    pub body: Box<models::DetailedOfflineWorker>,
    #[serde(rename = "type")]
    pub r#type: Type,
    #[serde(rename = "_id")]
    pub _id: String,
    #[serde(rename = "created_at")]
    pub created_at: String,
    #[serde(rename = "message")]
    pub message: String,
    #[serde(rename = "recipients")]
    pub recipients: Vec<models::NotificationRecipient>,
    #[serde(rename = "title")]
    pub title: String,
}

impl NotificationDetailed {
    pub fn new(body: models::DetailedOfflineWorker, r#type: Type, _id: String, created_at: String, message: String, recipients: Vec<models::NotificationRecipient>, title: String) -> NotificationDetailed {
        NotificationDetailed {
            body: Box::new(body),
            r#type,
            _id,
            created_at,
            message,
            recipients,
            title,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "other")]
    Other,
}

impl Default for Type {
    fn default() -> Type {
        Self::Other
    }
}

